# netdata configuration for aggregating data from remote hosts
#
# API keys authorize a pair of sending-receiving netdata servers.
# Once their communication is authorized, they can exchange metrics for any
# number of hosts.
#
# You can generate API keys, with the linux command: uuidgen
#
# -----------------------------------------------------------------------------
# 1. SLAVE NETDATA - THE ONE THAT WILL BE SENDING METRICS

[stream]
	enabled = no

	# where to send metrics to?
	# A space separated list of IP:PORT is accepted. The first available will
	# get the metrics.
	# IPv6 addresses should be [IP]:PORT
	destination =

	# The API_KEY to use (as the sender)
	api key =

	# other options (uncomment and set)

	# timeout seconds = 60
	# default port = 19999
	# buffer size bytes = 1048576
	# reconnect delay seconds = 5
	# initial clock resync iterations = 60
	# free orphan hosts after seconds = 3600


# -----------------------------------------------------------------------------
# 2. MASTER NETDATA - THE ONE THAT WILL BE RECEIVING METRICS
#
#    You can have one API key per slave, or the same API key for all slaves.
#
#    All options below are used in this order:
#
#    a) MACHINE_GUID (settings for each machine)
#    b) API_KEY      (settings for the API key)
#    c) this netdata defaults (as in netdata.conf)
#
#    You can combine the above (the more specific setting will be used).

# API key authentication
# If the key is not listed here, it will not be able to connect.

[API_KEY]
    # Default settings for the API key

    # You can disable the API key, by setting this to: no
    # The default (for unknown API keys) is also: no
    enabled = no

    # The default history in entries, for all hosts using this API key.
    # You can also set it per host below.
    # If you don't set it here, the history size of the central netdata
    # will be used
    default history = 3600

    # The default memory mode to be used for all hosts using this API key.
    # You can also set it per host below.
    # If you don't set it here, the memory mode of netdata.conf will be used.
    # Valid modes:
    #    save    save on exit, load on start
    #    map     like swap (continuously syncing to disks)
    #    ram     keep it in RAM, don't touch the disk
    #    none    no database (passing through this netdata)
    default memory mode = ram

    # Shall we enable health monitoring for the hosts using this API key?
    # 3 values:
    #    yes     enable alarms
    #    no      do not enable alarms
    #    auto    enable alarms, only when the sending netdata is connected
    # You can also set it per host, below.
    # The default is the same as to netdata.conf
    health enabled by default = auto

    # postpone alarms for a short period after the sender is connected
    default postpone alarms on connect seconds = 60

    # need to route metrics differently? set these.
    # the defaults are the ones at the [stream] section
    #default proxy enabled = yes | no
    #default proxy destination = IP:PORT IP:PORT ...
    #default proxy api key = API_KEY


# -----------------------------------------------------------------------------
# Each netdata has a unique GUID - generated the first time netdata starts.
# You can find it at /var/lib/netdata/registry/netdata.public.unique.id
# The host sending data will have one. If it is static and you can find it,
# you can give settings for each specific host here.

[MACHINE_GUID]
    # enable this host: yes | no
    # THIS IS NOT A SECURITY MECHANISM - AN ATTACKER CAN SET ANY OTHER GUID.
    # Use only the API key for security.
    enabled = no

    # The number of entries in the database
    history = 3600

    # The memory mode of the database: save | map | ram | none
    memory mode = save

    # Health / alarms control: yes | no | auto
    health enabled = yes

    # postpone alarms when the sender connects
    postpone alarms on connect seconds = 60

    # need to route metrics differently?
    #proxy enabled = yes | no
    #proxy destination = IP:PORT IP:PORT ...
    #proxy api key = API_KEY
