#!/bin/bash

base="`dirname "$0"`"

if [ ! -d "$base" -o ! -f "$base/netdata.c" ]
then
	echo >&2 "Cannot find my home directory '${base}'."
	exit 1
fi
cd "$base" || exit 1

# every how many seconds to show the graphs
NETDATA_CONFIG_UPDATE_EVERY=2

# the detail of the data that will be kept in netdata
NETDATA_CONFIG_INTERNAL_UPDATE_EVERY=1

# how many points should the graphs have
NETDATA_CONFIG_HISTORY_POINTS=120

# how many points should be kept in memory
NETDATA_CONFIG_HISTORY_DATA=3600

# every how many graph refreshes, the page should be reloaded
# this fixes a bug in the google graphs API which leaks memory
# when refreshes graphs
NETDATA_CONFIG_RELOAD_EVERY=500

if [ -f netdata.conf ]
then
	source netdata.conf
fi

# how many history lines to keep in netdata
NETDATA_HISTORY_LINES=$[NETDATA_CONFIG_UPDATE_EVERY * NETDATA_CONFIG_HISTORY_POINTS / NETDATA_CONFIG_INTERNAL_UPDATE_EVERY]

echo "Creating a directory for netdata..."
data=
for x in /run/netdata /var/run/netdata /tmp/netdata
do
	echo "	Trying '${x}'..."
	if [ ! -d "${x}" ]
	then
		mkdir "${x}" 2>/dev/null
		if [ $? -eq 0 ]
		then
			echo "	OK. '${x}' works."
			data="${x}"
			break
		fi
	else
		echo "	OK. '${x}' works."
		data="${x}"
		break
	fi
done

if [ -z "${data}" ]
then
	echo >&2 "Cannot find where to put netdata files."
	exit 1
fi

if [ -h data ]
then
	echo "Removing existing $base/data link"
	rm data || exit 1
fi

if [ ! -d data ]
then
	echo "Linking '${data}' to $base/data"
	ln -s "${data}" data || exit 1
else
	echo >&2 "Directory $base/data already exists. Not touching it, however it should be a link '${data}'."
fi

cp "${base}/netdata.js" "${data}/"
cp "${base}/tc-all.sh" "${data}/"
chmod 700 "${data}/tc-all.sh"

echo "Finding proper parameters for dashboard..."

echo "Stopping a (possibly) running netdata..."
killall netdata 2>/dev/null
killall tc-all.sh 2>/dev/null

echo "Compiling netdata"
gcc -Wall -O3 -o netdata netdata.c -lpthread || exit 1

echo "Starting netdata"
p=`pwd`
cd data
$p/netdata -d -u $NETDATA_CONFIG_INTERNAL_UPDATE_EVERY -l $NETDATA_HISTORY_LINES || exit 1
cd "$p"

sleep 2

# count all graphs
all=`wget http://127.0.0.1:19999/list -O - 2>/dev/null`
count=0
for x in $all
do
	y=`echo "$x" | tr ".-" "__"`
	eval "t=\${NETDATA_PRIORITY_${y}}"
	if [ ! "$t" = "IGNORE" ]
	then
		count=$[count + 1]
	fi
done

echo "We have $count graphs..."

# find the optimal graphs per page
w=1
h=1
a=1
while [ $a -lt $count ]
do
	if [ $[h+1] -le $w ]
	then
		h=$[h+1]
	else
		w=$[w+1]
		h=$[h-1]
	fi

	a=$[w*h]
done

echo "Optimal size is $w x $h..."

# prefer to have wider graphs
while [ $w -ge $h ]
do
	w=$[w-1]
	h=$[h+1]
	a=$[w*h]
done
if [ $a -lt $count ]
then
	h=$[h+1]
fi

# make sure we don't display too small graphs
if [ $w -gt 10 ]
then
	w=10
fi
if [ $h -gt 10 ]
then
	h=10
fi
echo "Final screen size is $w x $h..."

echo "Generating ${data}/index.html"
host="`hostname`"
cat >${data}/index.html <<EOF
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<style>
        * {font-family:Arial}
        div {float: left; margin: 0 0 0 0; }
</style>
<title>${host} netdata</title>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />

	<!--Load the AJAX API-->
	<script type="text/javascript" src="https://www.google.com/jsapi"></script>
	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	<script type="text/javascript" src="netdata.js"></script>
	<script type="text/javascript">
	
	// Set a callback to run when the Google Visualization API is loaded.
	google.setOnLoadCallback(drawCharts);
	
	function drawCharts() {
		var width = $w; // if zero, auto-adjusts to 50% of screen, 1-10 goes 1/width of screen
		var height = $h;
		
		// EDIT: add one line per interface you have
		// EDIT: 
		// EDIT:   name    div id                    json data           graph 					vertical axis title
		// EDIT: --------------------------------------------------------------------------------------------------
EOF

for x in $all
do
	y=`echo "$x" | tr ".-" "__"`

	title=
	vtitle=
	case "$x" in
		net.*)
			title="Network Usage for "
			vtitle="bandwidth in kilobits/s"
			;;

		disk.*)
			title="Disk I/O for "
			vtitle="I/O in kilobytes/s"
			;;

		tc.*)
			title="Class utilization for "
			vtitle="bandwidth in kilobits/s"
			;;

	esac

	eval "NETDATA_TITLE_${y}=\${NETDATA_TITLE_${y}:-${x}}"
	eval "t=\${NETDATA_TITLE_${y}}"
	
	eval "p=\${NETDATA_PRIORITY_${y}}"
	if [ ! "$p" = "IGNORE" ]
	then
		cat >>${data}/index.html <<EOF2
		drawChart('${x}', '${y}_div', width, height, "data/${x}/${NETDATA_CONFIG_HISTORY_POINTS}/${NETDATA_CONFIG_UPDATE_EVERY}/average/", "${title}${t} (${x})", "${vtitle}");
EOF2
	fi
done

ref=$[4 * NETDATA_CONFIG_UPDATE_EVERY]
tim=$[1000 * NETDATA_CONFIG_UPDATE_EVERY]
if [ $count -gt 4 ]
then
	ref=1
	tim=$[1000 * NETDATA_CONFIG_UPDATE_EVERY / count]
	if [ $tim -lt $[200 * NETDATA_CONFIG_UPDATE_EVERY] ]
	then
		tim=$[200 * NETDATA_CONFIG_UPDATE_EVERY]
	fi
fi

cat >>${data}/index.html <<EOF3
	}
	
	var refreshCount = 0;
	function myChartsRefresh() {
		refreshCount++;
		if(refreshCount > $NETDATA_CONFIG_RELOAD_EVERY) location.reload();

		// refresh up to $ref charts per second
		refreshCharts($ref);
	}
	
	setInterval(myChartsRefresh, $tim);

	window.onresize = function(event) {
		refreshCharts(999999);
	};
	</script>

	</head>

<body>
 	<!--
		EDIT: add one div per interface you have
		EDIT: use the same id above and bellow!
	-->
EOF3

tmp="/tmp/$RANDOM.netdata.$$.$RANDOM"
for x in $all
do
	y=`echo "$x" | tr ".-" "__"`
	eval "NETDATA_PRIORITY_${y}=\${NETDATA_PRIORITY_${y}:-${x}}"
	eval "t=\${NETDATA_PRIORITY_${y}}"
	if [ ! "$t" = "IGNORE" ]
	then
		echo "${t}|${y}"
	fi
done >"${tmp}"

for x in `cat "${tmp}" | sort`
do
	n="`echo "$x" | cut -d '|' -f 2-`"
	cat >>${data}/index.html <<EOF4
	<div id="${n}_div"></div>
EOF4
done
rm -f "${tmp}"

cat >>${data}/index.html <<EOF5
 </body>
</html>
EOF5

set|grep ^NETDATA_ >netdata.conf

if [ ! -h "${data}/data" ]
then
	cd "${data}"
	ln -s . data
fi

echo "All Done."
echo "Just hit http://127.0.0.1:19999/ from your browser."

