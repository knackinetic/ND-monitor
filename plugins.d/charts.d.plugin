#!/bin/sh

# -----------------------------------------------------------------------------
# insternal defaults

pause_method="sleep" # use either "suspend" or "sleep"
                     # DO NOT USE SUSPEND - LINUX WILL SUSPEND NETDATA TOO
                     # THE WHOLE PROCESS GROUP - NOT JUST THE SHELL

pluginsd="plugins.d"
confd="conf.d"
chartsd="charts.d"
myconfig="$confd/charts.d.conf"
minimum_update_frequency=1
update_every=1	# this is overwritten by the command line

# work around for non BASH shells
charts_create="_create"
charts_update="_update"
charts_check="_check"
charts_undescore="_"

# -----------------------------------------------------------------------------
# parse parameters

debug=0
check=0
chart_only=
while [ ! -z "$1" ]
do
	if [ "$1" = "check" ]
	then
		check=1
		shift
		continue
	fi

	if [ "$1" = "debug" -o "$1" = "all" ]
	then
		debug=1
		shift
		continue
	fi

	if [ -f "$chartsd/$1.chart.sh" ]
	then
		debug=1
		chart_only="`echo $1.chart.sh | sed "s/\.chart\.sh$//g"`"
		shift
		continue
	fi

	if [ -f "$chartsd/$1" ]
	then
		debug=1
		chart_only="`echo $1 | sed "s/\.chart\.sh$//g"`"
		shift
		continue
	fi

	if [ -f "$1" ]
	then
		debug=1
		chart_only="`basename "$1" | sed "s/\.chart\.sh$//g"`"
		shift
		continue
	fi

	# number check
	n="$1"
	x=$((n + 1 - 1))
	if [ "$x" = "$n" ]
	then
		update_every=$x
		shift
		continue
	fi

	echo >&2 "Cannot understand parameter $1. Aborting."
	echo "DISABLE"
	exit 1
done


# -----------------------------------------------------------------------------
# load my configuration

if [ -f "$myconfig" ]
	then
	. "$myconfig"
	if [ $? -ne 0 ]
	then
		echo >&2 "charts.d: cannot load $myconfig"
		echo "DISABLE"
		exit 1
	fi
fi

if [ "$pause_method" = "suspend" ]
then
	# enable bash job control
	# this is required for suspend to work
	set -m
fi

# -----------------------------------------------------------------------------
# internal checks

# netdata passes the requested update frequency as the first argument
update_every=$(( update_every + 1 - 1))	# makes sure it is a number
test $update_every -eq 0 && update_every=1 # if it is zero, make it 1

# check the charts.d directory
if [ ! -d "$chartsd" ]
	then
	echo >&2 "charts.d: cannot find charts directory '$chartsd'"
	echo "DISABLE"
fi


# -----------------------------------------------------------------------------
# loop control

# default sleep function
loopsleepms() {
	sleep $1
}
# if found and included, this file overwrites loopsleepms()
# with a high resolution timer function for precise looping.
. "`dirname $0`/loopsleepms.sh.inc"


# -----------------------------------------------------------------------------
# charts check functions

all_charts() {
	cd "$chartsd"
	ls *.chart.sh | sed "s/\.chart\.sh$//g"
}

all_enabled_charts() {
	local charts=

	# find all enabled charts

	for chart in `all_charts`
	do
		eval "enabled=\$$chart"
		if [ "$enabled" = "yes" ]
		then
			local charts="$charts $chart"
		else
			echo >&2 "charts.d: chart '$chart' is NOT enabled. Add a line with $chart=yes in $myconfig to enable it."
		fi
	done

	local charts2=
	for chart in $charts
	do
		# check the enabled charts
		local check=`cat "$chartsd/$chart.chart.sh" | sed "s/^ \+//g" | grep "^$chart$charts_check()"`
		if [ -z "$check" ]
		then
			echo >&2 "charts.d: chart '$chart' does not seem to have a $chart$charts_check() function. Disabling it."
			continue
		fi

		local create=`cat "$chartsd/$chart.chart.sh" | sed "s/^ \+//g" | grep "^$chart$charts_create()"`
		if [ -z "$create" ]
		then
			echo >&2 "charts.d: chart '$chart' does not seem to have a $chart$charts_create() function. Disabling it."
			continue
		fi

		local update=`cat "$chartsd/$chart.chart.sh" | sed "s/^ \+//g" | grep "^$chart$charts_update()"`
		if [ -z "$update" ]
		then
			echo >&2 "charts.d: chart '$chart' does not seem to have a $chart$charts_update() function. Disabling it."
			continue
		fi

		# check its config
		if [ -f "$confd/$chart.conf" ]
		then
			if [ ! -z "`cat "$confd/$chart.conf" | sed "s/^ \+//g" | grep -v "^$" | grep -v "^#" | grep -v "^$chart$charts_undescore"`" ]
			then
				echo >&2 "charts.d: chart's $chart config $confd/$chart.conf should only have lines starting with $chart$charts_undescore . Disabling it."
				continue
			fi
		fi

		"$pluginsd/charts.d.dryrun-helper.sh" "$chart" "$chartsd/$chart.chart.sh" "$confd/$chart.conf" >/dev/null
		if [ $? -ne 0 ]
		then
			echo >&2 "charts.d: chart's $chart did not pass the dry run check. This means it uses global variables not starting with $chart. Disabling it."
			continue
		fi

		local charts2="$charts2 $chart"
	done

	echo $charts2
}


# -----------------------------------------------------------------------------
# load the charts

active_charts=
for chart in `all_enabled_charts`
do
	. "$chartsd/$chart.chart.sh"

	if [ -f "$confd/$chart.conf" ]
	then
		. "$confd/$chart.conf"
	fi

	$chart$charts_check
	if [ $? -eq 0 ]
	then
		active_charts="$active_charts $chart"
	else
		echo >&2 "charts.d: chart '$chart' check() function reports failure."
	fi
done


# -----------------------------------------------------------------------------
# check overwrites

# enable work time reporting
debug_time=
test $debug -eq 1 && debug_time=tellwork

# if we only need a specific chart, remove all the others
if [ ! -z "$chart_only" ]
then
	check_charts=
	for chart in $active_charts
	do
		if [ "$chart" = "$chart_only" ]
		then
			check_charts="$chart"
			break
		fi
	done
	active_charts="$check_charts"
fi

# stop if we just need a pre-check
if [ $check -eq 1 ]
then
	echo "CHECK RESULT"
	echo "Will run the charts: $active_charts"
	exit 0
fi


# -----------------------------------------------------------------------------
# create charts

run_charts=
for chart in $active_charts
do
	$chart$charts_create
	if [ $? -eq 0 ]
	then
		run_charts="$run_charts $chart"
	else
		echo >&2 "charts.d: chart '$chart' create() function reports failure."
	fi
done


# -----------------------------------------------------------------------------
# update dimensions
while [ 1 ]
do
	now_charts=$run_charts
	run_charts=

	for chart in $now_charts
	do
		$chart$charts_update
		if [ $? -eq 0 ]
		then
			run_charts="$run_charts $chart"
		else
			echo >&2 "charts.d: chart '$chart' update() function reports failure. Disabling it."
		fi
	done

	if [ "$pause_method" = "suspend" ]
	then
		echo "STOPPING_WAKE_ME_UP_PLEASE"
		suspend || ( echo >&2 "suspend returned error $?, falling back to sleep."; loopsleepms $debug_time $update_every )
	else
		# wait the time you are required to
		loopsleepms $debug_time $update_every
	fi
done
